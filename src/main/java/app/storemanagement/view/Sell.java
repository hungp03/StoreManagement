package app.storemanagement.view;

import app.storemanagement.controller.SellCtrl;
import app.storemanagement.model.Connection.DBConnection;
import app.storemanagement.model.ProductTableModel;
import app.storemanagement.utils.Util;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.Timer;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.AbstractDocument;
import javax.swing.text.AttributeSet;
import javax.swing.text.BadLocationException;
import javax.swing.text.DocumentFilter;

/**
 *
 * @author Hung Pham
 */
public class Sell extends javax.swing.JPanel {

    private List<ProductTableModel> cart = new ArrayList<>();
    private int uid;

    public void setUid(int uid) {
        this.uid = uid;
    }

    public boolean isCartEmpty() {
        return cart.isEmpty();
    }

    private SellCtrl sell = new SellCtrl();

    /**
     * Creates new form Invoice
     */
    public Sell() {
        initComponents();
        displayProduct();
        initInvoicePage();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        JLabel1 = new javax.swing.JLabel();
        Jlabel2 = new javax.swing.JLabel();
        JLabel3 = new javax.swing.JLabel();
        selectCustomer = new javax.swing.JButton();
        customerPhone = new javax.swing.JTextField();
        customerName = new javax.swing.JTextField();
        customerID = new javax.swing.JTextField();
        invoiceLb = new javax.swing.JLabel();
        total = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        paymentMethod = new javax.swing.JComboBox<>();
        cancelBtn = new javax.swing.JButton();
        newEntry = new javax.swing.JButton();
        confirmBtn = new javax.swing.JButton();
        printBtn = new javax.swing.JButton();
        invoiceID = new javax.swing.JTextField();
        totalTxt = new javax.swing.JTextField();
        paidMoney = new javax.swing.JTextField();
        cusMoney = new javax.swing.JTextField();
        createTime = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        cartTb = new javax.swing.JTable();
        deleteProduct = new javax.swing.JButton();
        deleteAll = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        productTb = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        searchBox = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        addToCart = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();

        setName("invoice"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1024, 721));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        JLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        JLabel1.setText("Tên KH");
        jPanel4.add(JLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 14, -1, -1));

        Jlabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        Jlabel2.setText("Mã KH");
        jPanel4.add(Jlabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 52, -1, -1));

        JLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        JLabel3.setText("SĐT");
        jPanel4.add(JLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(8, 90, -1, -1));

        selectCustomer.setText("Chọn");
        selectCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectCustomerActionPerformed(evt);
            }
        });
        jPanel4.add(selectCustomer, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 50, 60, -1));

        customerPhone.setEditable(false);
        customerPhone.setBackground(new java.awt.Color(255, 255, 255));
        customerPhone.setFocusable(false);
        jPanel4.add(customerPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 90, 150, -1));

        customerName.setEditable(false);
        customerName.setBackground(new java.awt.Color(255, 255, 255));
        customerName.setFocusable(false);
        jPanel4.add(customerName, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 10, 150, -1));

        customerID.setEditable(false);
        customerID.setBackground(new java.awt.Color(255, 255, 255));
        customerID.setFocusable(false);
        jPanel4.add(customerID, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 150, -1));

        invoiceLb.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        invoiceLb.setText("Mã hóa đơn");

        total.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        total.setText("Tổng tiền");

        jLabel11.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel11.setText("Tiền khách đưa");

        jLabel12.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel12.setText("Tiền trả lại");

        jLabel13.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel13.setText("Hình thức thanh toán");

        paymentMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tien mat", "Chuyen khoan", "The" }));
        paymentMethod.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                paymentMethodItemStateChanged(evt);
            }
        });

        cancelBtn.setText("Hủy");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        newEntry.setText("Tạo mới");
        newEntry.setEnabled(false);
        newEntry.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newEntryActionPerformed(evt);
            }
        });

        confirmBtn.setText("Xác nhận");
        confirmBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmBtnActionPerformed(evt);
            }
        });

        printBtn.setText("In");
        printBtn.setEnabled(false);
        printBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printBtnActionPerformed(evt);
            }
        });

        invoiceID.setEditable(false);
        invoiceID.setBackground(new java.awt.Color(255, 255, 255));
        invoiceID.setFocusable(false);

        totalTxt.setEditable(false);
        totalTxt.setBackground(new java.awt.Color(255, 255, 255));
        totalTxt.setFocusable(false);

        paidMoney.setEditable(false);
        paidMoney.setBackground(new java.awt.Color(255, 255, 255));
        paidMoney.setFocusable(false);

        cusMoney.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cusMoneyActionPerformed(evt);
            }
        });
        cusMoney.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cusMoneyKeyPressed(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                cusMoneyKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                cusMoneyKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, 327, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(createTime)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel11)
                            .addComponent(confirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(invoiceLb)
                            .addComponent(total)
                            .addComponent(jLabel12)
                            .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(paidMoney)
                            .addComponent(totalTxt)
                            .addComponent(invoiceID)
                            .addComponent(paymentMethod, javax.swing.GroupLayout.Alignment.TRAILING, 0, 120, Short.MAX_VALUE)
                            .addComponent(newEntry, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(printBtn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cusMoney))
                        .addGap(52, 52, 52))))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(createTime)
                .addGap(14, 14, 14)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(invoiceLb)
                    .addComponent(invoiceID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(total)
                    .addComponent(totalTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cusMoney, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(paidMoney, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(paymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(58, 58, 58)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(newEntry, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(29, 29, 29)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(confirmBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(printBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(164, Short.MAX_VALUE))
        );

        ((AbstractDocument) cusMoney.getDocument()).setDocumentFilter(new DocumentFilter() {
            @Override
            public void insertString(FilterBypass fb, int offset, String string, AttributeSet attr) throws BadLocationException {
                if (string.matches("\\d*")) {
                    super.insertString(fb, offset, string, attr);
                }
            }

            @Override
            public void replace(FilterBypass fb, int offset, int length, String text, AttributeSet attrs) throws BadLocationException {
                if (text.matches("\\d*")) {
                    super.replace(fb, offset, length, text, attrs);
                }
            }
        });

        add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(658, 32, -1, 660));

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        cartTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Tên SP", "Phân loại", "Đơn giá", "Số lượng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        cartTb.setRowHeight(28);
        cartTb.setSelectionBackground(new java.awt.Color(76, 149, 108));
        cartTb.setSelectionForeground(new java.awt.Color(255, 255, 255));
        jScrollPane1.setViewportView(cartTb);

        deleteProduct.setBackground(new java.awt.Color(76, 149, 108));
        deleteProduct.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteProduct.setForeground(new java.awt.Color(255, 255, 255));
        deleteProduct.setText("Xóa sản phẩm");
        deleteProduct.setBorder(null);
        deleteProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteProductActionPerformed(evt);
            }
        });

        deleteAll.setBackground(new java.awt.Color(76, 149, 108));
        deleteAll.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        deleteAll.setForeground(new java.awt.Color(255, 255, 255));
        deleteAll.setText("Xóa tất cả");
        deleteAll.setBorder(null);
        deleteAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(deleteProduct, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(deleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(61, 61, 61)
                .addComponent(deleteProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(deleteAll, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 32, 640, -1));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Giỏ hàng");
        add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 6, -1, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("Danh sách sản phẩm");
        add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 282, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        productTb.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã SP", "Tên SP", "Phân loại", "Số lượng", "Số lượng"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        productTb.setRowHeight(28);
        productTb.setSelectionBackground(new java.awt.Color(76, 149, 108));
        productTb.setSelectionForeground(new java.awt.Color(255, 255, 255));
        productTb.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(productTb);

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(76, 149, 108));
        jLabel3.setText("Tìm kiếm sản phẩm");

        searchBox.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchBoxKeyTyped(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(76, 149, 108));
        jLabel4.setText("Tìm theo");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Mã SP", "Tên SP" }));
        jComboBox1.setToolTipText("");
        jComboBox1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jComboBox1ItemStateChanged(evt);
            }
        });

        addToCart.setBackground(new java.awt.Color(76, 149, 108));
        addToCart.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        addToCart.setForeground(new java.awt.Color(255, 255, 255));
        addToCart.setText("Thêm sản phẩm");
        addToCart.setBorder(null);
        addToCart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addToCartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(searchBox, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(130, 130, 130)
                        .addComponent(addToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchBox, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                            .addComponent(jComboBox1)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(addToCart, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 286, Short.MAX_VALUE)
                .addGap(16, 16, 16))
        );

        add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(6, 308, -1, 380));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Chi tiết đơn hàng");
        add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(658, 6, -1, -1));
    }// </editor-fold>//GEN-END:initComponents
    private void initInvoicePage() {
        int iid = Util.getNextID("Invoice_ID", "Invoice");
        invoiceID.setText(String.valueOf(iid));
    }

    private void displayProduct() {
        displayProductTable(searchBox.getText(), (String) jComboBox1.getSelectedItem());
    }

    private void clearCustomerInfo() {
        customerName.setText("");
        customerID.setText("");
        customerPhone.setText("");
    }

    private void handleButton(boolean b) {
        confirmBtn.setEnabled(b);
        cancelBtn.setEnabled(b);
        newEntry.setEnabled(!b);
        printBtn.setEnabled(!b);
    }

    public void clearCart() {
        cart.clear();
        displayCartTable();
    }


    private void deleteAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteAllActionPerformed
        if (!cancelBtn.isEnabled() || !confirmBtn.isEnabled()) {
            JOptionPane.showMessageDialog(null, "Vui lòng tạo mới hóa đơn trước", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        clearCart();
        totalTxt.setText("");
        calculatePaidMoney(cusMoney.getText());
    }//GEN-LAST:event_deleteAllActionPerformed

    // Phương thức lấy sản phẩm được chọn từ bảng productTb
    private ProductTableModel getSelectedProduct() {
        int selectedRow = productTb.getSelectedRow();
        int id = Integer.parseInt(productTb.getValueAt(selectedRow, 0).toString());
        String name = productTb.getValueAt(selectedRow, 1).toString();
        String categoryName = productTb.getValueAt(selectedRow, 2).toString();
        double unitPrice = 0;
        try {
            unitPrice = Double.parseDouble(Util.vndConvertToNumber(productTb.getValueAt(selectedRow, 3).toString()));
        } catch (ParseException ex) {
            Logger.getLogger(Sell.class.getName()).log(Level.SEVERE, null, ex);
        }
        int qtyInStock = Integer.parseInt(productTb.getValueAt(selectedRow, 4).toString());
        return new ProductTableModel(id, name, categoryName, unitPrice, qtyInStock);
    }

    private void addToCartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addToCartActionPerformed
        if (!cancelBtn.isEnabled() || !confirmBtn.isEnabled()) {
            JOptionPane.showMessageDialog(null, "Vui lòng tạo mới hóa đơn trước khi thêm sản phẩm mới", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        if (productTb.getSelectedRow() >= 0) {
            ProductTableModel selectedProduct = getSelectedProduct();
            // Đổi tên biến value thành quantityInput
            String quantityInput = JOptionPane.showInputDialog(null, "Nhập số lượng sản phẩm");
            if (Objects.isNull(quantityInput) || quantityInput.trim().isEmpty()) {
                return;
            }
            int quantity;
            try {
                quantity = Integer.parseInt(quantityInput);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Số lượng không hợp lệ", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }
            if (quantity > selectedProduct.getQty()) {
                JOptionPane.showMessageDialog(null, "Số lượng trong kho không đủ", "Warning", JOptionPane.WARNING_MESSAGE);
            } else {
                //gán giá trị cho biến found
                boolean found = cart.stream().anyMatch(product -> product.getId() == selectedProduct.getId());
                if (found) {
                    // Tìm và cập nhật sản phẩm trong danh sách
                    cart.stream().filter(product -> product.getId() == selectedProduct.getId())
                            .forEach(product -> {
                                product.setQty(product.getQty() + quantity);
                            });
                } else {
                    // Thêm sản phẩm mới vào danh sách
                    cart.add(new ProductTableModel(selectedProduct.getId(), selectedProduct.getName(), selectedProduct.getCategoryName(), selectedProduct.getUnitprice(), quantity));
                }
                // Hiển thị bảng giỏ hàng và bảng sản phẩm
                displayCartTable();
                displayProduct();
                totalTxt.setText(Util.convertToVND(sell.totalAmount(cart)));
            }
        } else {
            JOptionPane.showMessageDialog(null, "Chưa chọn sản phẩm", "Warning", JOptionPane.WARNING_MESSAGE);
        }
        calculatePaidMoney(cusMoney.getText());
        if (paidMoney.getText().isBlank()) {
            cusMoney.setText("");
        }
    }//GEN-LAST:event_addToCartActionPerformed

    private void selectCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectCustomerActionPerformed
        JTextField textField = new JTextField();
        Object[] message = {
            "Nhập Mã KH hoặc SĐT:", textField
        };

        Object[] options = {"FindID", "FindPhone", "Cancel"};

        int option = JOptionPane.showOptionDialog(null, message, "Enter", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[1]);
        String sql = "";
        switch (option) {
            case JOptionPane.YES_OPTION -> {
                sql = "select Customer_ID, Full_Name, Phone from Customer where Customer_ID = ?";
            }
            case JOptionPane.NO_OPTION -> {
                sql = "select Customer_ID, Full_Name, Phone from Customer where Phone = ?";
            }
            case JOptionPane.CANCEL_OPTION -> {
                return;
            }
            default -> {
            }
        }
        if (!sql.isEmpty()) {
            try (Connection conn = DBConnection.getConnection(); PreparedStatement stmt = conn.prepareStatement(sql)) {
                stmt.setString(1, textField.getText());
                ResultSet rs = stmt.executeQuery();
                if (!rs.next()) {
                    JOptionPane.showMessageDialog(null, "Không tìm thấy kết quả", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    customerName.setText(rs.getString("Full_Name"));
                    customerID.setText(String.valueOf(rs.getInt("Customer_ID")));
                    customerPhone.setText(rs.getString("Phone"));
                }
            } catch (SQLException e) {
                if (e.getErrorCode() == 245) {
                    JOptionPane.showMessageDialog(null, "Mã khách hàng phải là số", "Error", JOptionPane.WARNING_MESSAGE);
                }
                else{
                    JOptionPane.showMessageDialog(null, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_selectCustomerActionPerformed

    private void deleteProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteProductActionPerformed
        if (!cancelBtn.isEnabled() || !confirmBtn.isEnabled()) {
            JOptionPane.showMessageDialog(null, "Vui lòng tạo mới hóa đơn trước", "Warning", JOptionPane.WARNING_MESSAGE);
            return;
        }
        int idx = cartTb.getSelectedRow();
        if (idx >= 0) {
            int id = Integer.parseInt(cartTb.getValueAt(idx, 0).toString());
            int pqty = Integer.parseInt(cartTb.getValueAt(idx, 4).toString());
            cart.remove(idx);
            displayCartTable();
            if (cart.isEmpty()) {
                totalTxt.setText("");
            } else {
                totalTxt.setText(Util.convertToVND(sell.totalAmount(cart)));
            }
        } else {
            JOptionPane.showMessageDialog(null, "Chưa chọn sản phẩm để xóa", "Alert", JOptionPane.WARNING_MESSAGE);
        }
        calculatePaidMoney(cusMoney.getText());
    }//GEN-LAST:event_deleteProductActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        clearCart();
        totalTxt.setText("");
        cusMoney.setText("");
        paidMoney.setText("");
        clearCustomerInfo();
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void newEntryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newEntryActionPerformed
        createTime.setText("");
        invoiceID.setText(String.valueOf(Util.getNextID("Invoice_ID", "Invoice")));
        totalTxt.setText("");
        cusMoney.setText("");
        paidMoney.setText("");
        handleButton(true);
        clearCustomerInfo();
    }//GEN-LAST:event_newEntryActionPerformed

    private void searchBoxKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchBoxKeyTyped
        Timer timer = new Timer(500, (ActionEvent e) -> {
            displayProduct();
        });
        timer.setRepeats(false); // Đảm bảo rằng Timer chỉ thực hiện một lần

        // Thêm DocumentListener vào searchTextField
        searchBox.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void changedUpdate(DocumentEvent e) {
                restartTimer();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                restartTimer();
            }

            @Override
            public void insertUpdate(DocumentEvent e) {
                restartTimer();
            }

            public void restartTimer() {
                if (timer.isRunning()) {
                    timer.restart();
                } else {
                    timer.start();
                }
            }
        });
    }//GEN-LAST:event_searchBoxKeyTyped

    private void jComboBox1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jComboBox1ItemStateChanged
        searchBox.setText("");
    }//GEN-LAST:event_jComboBox1ItemStateChanged

    private void addInvoice(int invoiceId, int customerId, double amount, double customerCash, double paid, String payment_Method) {
        boolean success = sell.addInvoice(invoiceId, customerId, uid, amount, customerCash, paid, payment_Method, cart);
        if (success) {
            handleSuccess();
        }
    }

    private void handleSuccess() {
        JOptionPane.showMessageDialog(null, "Thêm hóa đơn thành công!", "Notification", JOptionPane.INFORMATION_MESSAGE);
        cart.clear();
        displayCartTable();
        handleButton(false);
        createTime.setText("Thời gian tạo: " + Util.getCurrentDateTime());
    }

    private void confirmAndAddInvoice(int invoiceId, int customerId, double amount, double customerCash, String payment_Method) {
        int confirm = JOptionPane.showConfirmDialog(null, "Bạn có muốn thêm hóa đơn không?", "Xác nhận", JOptionPane.YES_NO_OPTION);
        if (confirm == JOptionPane.YES_OPTION) {
            // Sử dụng phương thức addInvoice
            addInvoice(invoiceId, customerId, amount, customerCash, customerCash - amount, payment_Method);
        }
    }

    private void confirmBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmBtnActionPerformed
        if (cart.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Chưa có sản phẩm nào", "Notification", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        try {
            if (customerID.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Chưa thêm khách hàng", "Notification", JOptionPane.WARNING_MESSAGE);
                return;
            }
            int invoiceId = Integer.parseInt(invoiceID.getText());
            int customerId = Integer.parseInt(customerID.getText());
            double amount = Double.parseDouble(Util.vndConvertToNumber(totalTxt.getText()));
            String payment_Method = (String) paymentMethod.getSelectedItem();

            double customerCash = calculateCustomerCash(amount, payment_Method);
            if (customerCash == -1) {
                return;
            }
            confirmAndAddInvoice(invoiceId, customerId, amount, customerCash, payment_Method);
            displayProduct();
        } catch (ParseException ex) {
            Logger.getLogger(Sell.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_confirmBtnActionPerformed

    private double calculateCustomerCash(double amount, String payment_Method) {
        double customerCash = 0;
        if (payment_Method.equals("Chuyen khoan") || payment_Method.equals("The")) {
            customerCash = amount;
        } else {
            if (cusMoney.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Chưa nhập tiền khách gửi", "Notification", JOptionPane.WARNING_MESSAGE);
                return -1;
            }
            customerCash = Double.parseDouble(cusMoney.getText());
        }
        return customerCash;
    }

    private void paymentMethodItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_paymentMethodItemStateChanged
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            String selectedMethod = (String) evt.getItem(); // Lấy phương thức thanh toán
            if (selectedMethod.equals("Chuyen khoan") || selectedMethod.equals("The")) {
                cusMoney.setEditable(false);
                cusMoney.setText("");
                paidMoney.setText("");
            } else if (selectedMethod.equals("Tien mat")) {
                cusMoney.setEditable(true);
            }
        }
    }//GEN-LAST:event_paymentMethodItemStateChanged


    private void printBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printBtnActionPerformed
        PrintInvoice pi = new PrintInvoice(Integer.parseInt(invoiceID.getText()));
    }//GEN-LAST:event_printBtnActionPerformed

    private void cusMoneyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cusMoneyActionPerformed
        try {
            double totalMoney = Double.parseDouble(Util.vndConvertToNumber(totalTxt.getText()));
            double customerCash = Double.parseDouble(cusMoney.getText());
            if (customerCash < totalMoney) {
                JOptionPane.showMessageDialog(null, "Tiền khách đưa không đủ", "Notification", JOptionPane.WARNING_MESSAGE);
                return;
            }
            double res = customerCash - totalMoney;
            paidMoney.setText(Util.convertToVND(res));
        } catch (ParseException ex) {
            Logger.getLogger(Sell.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cusMoneyActionPerformed

    private void cusMoneyKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cusMoneyKeyPressed
        if (evt.isControlDown() && (evt.getKeyCode() == KeyEvent.VK_V)) {
            cusMoneyKeyTyped(evt);
        }
        calculatePaidMoney(cusMoney.getText());
    }//GEN-LAST:event_cusMoneyKeyPressed

    private void cusMoneyKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cusMoneyKeyTyped
        if (cusMoney.getText().length() > 8 || !(evt.getKeyChar() >= '0' && evt.getKeyChar() <= '9')) {
            evt.consume();
        }
    }//GEN-LAST:event_cusMoneyKeyTyped

    private void cusMoneyKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cusMoneyKeyReleased
        calculatePaidMoney(cusMoney.getText());
    }//GEN-LAST:event_cusMoneyKeyReleased

    private void calculatePaidMoney(String string_cus_money) {
        try {
            if (cusMoney.getText().isBlank()) {
                paidMoney.setText("");
            } else if (!cusMoney.getText().trim().isBlank() && !totalTxt.getText().trim().isBlank()) {
                int totalMoney = Integer.parseInt(Util.vndConvertToNumber(totalTxt.getText()));
                int cus_money = Integer.parseInt(string_cus_money.trim());

                if (cus_money - totalMoney >= 0) {
                    int paid_money = cus_money - totalMoney;
                    paidMoney.setText(Util.convertToVND(Double.parseDouble(String.valueOf(paid_money))));
                } else {
                    paidMoney.setText("");
                }
            } else if (totalTxt.getText().isBlank() && !cusMoney.getText().isBlank()) {
                Double paid_money = Double.valueOf(string_cus_money.trim());
                paidMoney.setText(Util.convertToVND(paid_money));
            }
        } catch (ParseException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "Lỗi tính tổng số tiền", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void displayCartTable() {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        // Thêm các cột vào model
        String[] columnNames = {"Mã SP", "Tên SP", "Phân loại", "Đơn giá", "Số lượng"};
        model.setColumnIdentifiers(columnNames);
        // Thêm dữ liệu vào model
        for (ProductTableModel p : cart) {
            String vnd = Util.convertToVND(p.getUnitprice());
            Object[] row = new Object[]{p.getId(), p.getCategoryName(), p.getName(), vnd, p.getQty()};
            model.addRow(row);
        }
        // Đặt model cho cartTable
        cartTb.setModel(model);
    }

    private void displayProductTable(String keyword, String searchMethod) {
        SellCtrl sellctrl = new SellCtrl(DBConnection.getConnection());
        List<ProductTableModel> products = sellctrl.displayAndSearch(keyword, searchMethod);

        DefaultTableModel tableModel = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        String[] columnNames = {"Mã SP", "Tên SP", "Tên phân loại", "Đơn giá", "Số lượng"};
        tableModel.setColumnIdentifiers(columnNames);

        for (ProductTableModel p : products) {
            Object[] row = new Object[5];
            row[0] = p.getId();
            row[1] = p.getName();
            row[2] = p.getCategoryName();
            row[3] = Util.convertToVND(p.getUnitprice());
            row[4] = p.getQty();
            tableModel.addRow(row);
        }

        productTb.setModel(tableModel);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JLabel1;
    private javax.swing.JLabel JLabel3;
    private javax.swing.JLabel Jlabel2;
    private javax.swing.JButton addToCart;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JTable cartTb;
    private javax.swing.JButton confirmBtn;
    private javax.swing.JLabel createTime;
    private javax.swing.JTextField cusMoney;
    private javax.swing.JTextField customerID;
    private javax.swing.JTextField customerName;
    private javax.swing.JTextField customerPhone;
    private javax.swing.JButton deleteAll;
    private javax.swing.JButton deleteProduct;
    private javax.swing.JTextField invoiceID;
    private javax.swing.JLabel invoiceLb;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton newEntry;
    private javax.swing.JTextField paidMoney;
    private javax.swing.JComboBox<String> paymentMethod;
    private javax.swing.JButton printBtn;
    private javax.swing.JTable productTb;
    private javax.swing.JTextField searchBox;
    private javax.swing.JButton selectCustomer;
    private javax.swing.JLabel total;
    private javax.swing.JTextField totalTxt;
    // End of variables declaration//GEN-END:variables
}
